{"uid":"2b8e285e3d84f9d0","name":"test_edit_user_invalid_token","fullName":"tests.api.test_api_edit_user#test_edit_user_invalid_token","historyId":"cf2ecd2de2c179ca44f764bbc15bc1ec","time":{"start":1718059349495,"stop":1718059349513,"duration":18},"status":"failed","statusMessage":"AssertionError: Expected error message for invalid token\nassert 'Expired or invalid JWT token' in '403 Client Error:  for url: http://localhost:4001/users/wdudley'\n +  where '403 Client Error:  for url: http://localhost:4001/users/wdudley' = str(HTTPError('403 Client Error:  for url: http://localhost:4001/users/wdudley'))","statusTrace":"edit_user_api = <api.edit_user.EditUser object at 0x7fea9d304140>\nuser_credentials = RegisterRequestDto(username='wdudley', password='%!LQ_ra60W', email='jamessmith@example.net', firstName='Sylvia', lastName='Wells', roles=['ROLE_ADMIN', 'ROLE_CLIENT'])\nnew_user_data = EditUserDto(email='newemail@example.com', firstName='NewFirstName', lastName='NewLastName', roles=['ROLE_ADMIN'])\n\n    def test_edit_user_invalid_token(edit_user_api, user_credentials, new_user_data):\n        try:\n            invalid_token = \"some_invalid_token\"\n>           response = edit_user_api.api_call(user_credentials.username, new_user_data, invalid_token)\n\ntests/api/test_api_edit_user.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/edit_user.py:8: in api_call\n    response = self.make_request(\"PUT\", f\"users/{username}\", json=user_dict, headers=headers)\napi/base_api.py:33: in make_request\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [403]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 403 Client Error:  for url: http://localhost:4001/users/wdudley\n\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/site-packages/requests/models.py:1021: HTTPError\n\nDuring handling of the above exception, another exception occurred:\n\nedit_user_api = <api.edit_user.EditUser object at 0x7fea9d304140>\nuser_credentials = RegisterRequestDto(username='wdudley', password='%!LQ_ra60W', email='jamessmith@example.net', firstName='Sylvia', lastName='Wells', roles=['ROLE_ADMIN', 'ROLE_CLIENT'])\nnew_user_data = EditUserDto(email='newemail@example.com', firstName='NewFirstName', lastName='NewLastName', roles=['ROLE_ADMIN'])\n\n    def test_edit_user_invalid_token(edit_user_api, user_credentials, new_user_data):\n        try:\n            invalid_token = \"some_invalid_token\"\n            response = edit_user_api.api_call(user_credentials.username, new_user_data, invalid_token)\n            # This line should ideally never be reached if the API behaves correctly\n            assert response.status_code == 403, \"Expected status code 403 for invalid token\"\n        except Exception as exc:\n            assert \"403\" in str(exc), \"Expected a 403 status code for invalid token\"\n>           assert \"Expired or invalid JWT token\" in str(exc), \"Expected error message for invalid token\"\nE           AssertionError: Expected error message for invalid token\nE           assert 'Expired or invalid JWT token' in '403 Client Error:  for url: http://localhost:4001/users/wdudley'\nE            +  where '403 Client Error:  for url: http://localhost:4001/users/wdudley' = str(HTTPError('403 Client Error:  for url: http://localhost:4001/users/wdudley'))\n\ntests/api/test_api_edit_user.py:104: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1718059348061,"stop":1718059348079,"duration":18},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"user_credentials","time":{"start":1718059348079,"stop":1718059348080,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"edit_user_api","time":{"start":1718059348079,"stop":1718059348079,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"new_user_data","time":{"start":1718059349275,"stop":1718059349275,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Expected error message for invalid token\nassert 'Expired or invalid JWT token' in '403 Client Error:  for url: http://localhost:4001/users/wdudley'\n +  where '403 Client Error:  for url: http://localhost:4001/users/wdudley' = str(HTTPError('403 Client Error:  for url: http://localhost:4001/users/wdudley'))","statusTrace":"edit_user_api = <api.edit_user.EditUser object at 0x7fea9d304140>\nuser_credentials = RegisterRequestDto(username='wdudley', password='%!LQ_ra60W', email='jamessmith@example.net', firstName='Sylvia', lastName='Wells', roles=['ROLE_ADMIN', 'ROLE_CLIENT'])\nnew_user_data = EditUserDto(email='newemail@example.com', firstName='NewFirstName', lastName='NewLastName', roles=['ROLE_ADMIN'])\n\n    def test_edit_user_invalid_token(edit_user_api, user_credentials, new_user_data):\n        try:\n            invalid_token = \"some_invalid_token\"\n>           response = edit_user_api.api_call(user_credentials.username, new_user_data, invalid_token)\n\ntests/api/test_api_edit_user.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/edit_user.py:8: in api_call\n    response = self.make_request(\"PUT\", f\"users/{username}\", json=user_dict, headers=headers)\napi/base_api.py:33: in make_request\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [403]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 403 Client Error:  for url: http://localhost:4001/users/wdudley\n\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/site-packages/requests/models.py:1021: HTTPError\n\nDuring handling of the above exception, another exception occurred:\n\nedit_user_api = <api.edit_user.EditUser object at 0x7fea9d304140>\nuser_credentials = RegisterRequestDto(username='wdudley', password='%!LQ_ra60W', email='jamessmith@example.net', firstName='Sylvia', lastName='Wells', roles=['ROLE_ADMIN', 'ROLE_CLIENT'])\nnew_user_data = EditUserDto(email='newemail@example.com', firstName='NewFirstName', lastName='NewLastName', roles=['ROLE_ADMIN'])\n\n    def test_edit_user_invalid_token(edit_user_api, user_credentials, new_user_data):\n        try:\n            invalid_token = \"some_invalid_token\"\n            response = edit_user_api.api_call(user_credentials.username, new_user_data, invalid_token)\n            # This line should ideally never be reached if the API behaves correctly\n            assert response.status_code == 403, \"Expected status code 403 for invalid token\"\n        except Exception as exc:\n            assert \"403\" in str(exc), \"Expected a 403 status code for invalid token\"\n>           assert \"Expired or invalid JWT token\" in str(exc), \"Expected error message for invalid token\"\nE           AssertionError: Expected error message for invalid token\nE           assert 'Expired or invalid JWT token' in '403 Client Error:  for url: http://localhost:4001/users/wdudley'\nE            +  where '403 Client Error:  for url: http://localhost:4001/users/wdudley' = str(HTTPError('403 Client Error:  for url: http://localhost:4001/users/wdudley'))\n\ntests/api/test_api_edit_user.py:104: AssertionError","steps":[],"attachments":[{"uid":"6fbe75b85628a957","name":"log","source":"6fbe75b85628a957.txt","type":"text/plain","size":1296}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests.api"},{"name":"suite","value":"test_api_edit_user"},{"name":"host","value":"fv-az654-837"},{"name":"thread","value":"3451-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.api.test_api_edit_user"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"2b8e285e3d84f9d0.json","parameterValues":[]}