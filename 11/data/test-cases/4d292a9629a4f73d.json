{"uid":"4d292a9629a4f73d","name":"test_get_all_users_invalid_token","fullName":"tests.api.test_api_get_users#test_get_all_users_invalid_token","historyId":"ef50fec252443f97a04fc9f98bd56e41","time":{"start":1718059351572,"stop":1718059351580,"duration":8},"status":"failed","statusMessage":"AssertionError: Expected error message for invalid token\nassert 'Expired or invalid JWT token' in '403 Client Error:  for url: http://localhost:4001/users'\n +  where '403 Client Error:  for url: http://localhost:4001/users' = str(HTTPError('403 Client Error:  for url: http://localhost:4001/users'))\n +    where HTTPError('403 Client Error:  for url: http://localhost:4001/users') = <ExceptionInfo HTTPError('403 Client Error:  for url: http://localhost:4001/users') tblen=4>.value","statusTrace":"get_users_api = <api.get_users.GetUsers object at 0x7fea9d3169f0>\n\n    def test_get_all_users_invalid_token(get_users_api):\n        invalid_token = \"some_invalid_token\"\n        with pytest.raises(Exception) as excinfo:\n            get_users_api.api_call(invalid_token)\n        assert \"403\" in str(excinfo.value), \"Expected a 403 status code for invalid token\"\n>       assert \"Expired or invalid JWT token\" in str(excinfo.value), \"Expected error message for invalid token\"\nE       AssertionError: Expected error message for invalid token\nE       assert 'Expired or invalid JWT token' in '403 Client Error:  for url: http://localhost:4001/users'\nE        +  where '403 Client Error:  for url: http://localhost:4001/users' = str(HTTPError('403 Client Error:  for url: http://localhost:4001/users'))\nE        +    where HTTPError('403 Client Error:  for url: http://localhost:4001/users') = <ExceptionInfo HTTPError('403 Client Error:  for url: http://localhost:4001/users') tblen=4>.value\n\ntests/api/test_api_get_users.py:68: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1718059348061,"stop":1718059348079,"duration":18},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"get_users_api","time":{"start":1718059350942,"stop":1718059350942,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Expected error message for invalid token\nassert 'Expired or invalid JWT token' in '403 Client Error:  for url: http://localhost:4001/users'\n +  where '403 Client Error:  for url: http://localhost:4001/users' = str(HTTPError('403 Client Error:  for url: http://localhost:4001/users'))\n +    where HTTPError('403 Client Error:  for url: http://localhost:4001/users') = <ExceptionInfo HTTPError('403 Client Error:  for url: http://localhost:4001/users') tblen=4>.value","statusTrace":"get_users_api = <api.get_users.GetUsers object at 0x7fea9d3169f0>\n\n    def test_get_all_users_invalid_token(get_users_api):\n        invalid_token = \"some_invalid_token\"\n        with pytest.raises(Exception) as excinfo:\n            get_users_api.api_call(invalid_token)\n        assert \"403\" in str(excinfo.value), \"Expected a 403 status code for invalid token\"\n>       assert \"Expired or invalid JWT token\" in str(excinfo.value), \"Expected error message for invalid token\"\nE       AssertionError: Expected error message for invalid token\nE       assert 'Expired or invalid JWT token' in '403 Client Error:  for url: http://localhost:4001/users'\nE        +  where '403 Client Error:  for url: http://localhost:4001/users' = str(HTTPError('403 Client Error:  for url: http://localhost:4001/users'))\nE        +    where HTTPError('403 Client Error:  for url: http://localhost:4001/users') = <ExceptionInfo HTTPError('403 Client Error:  for url: http://localhost:4001/users') tblen=4>.value\n\ntests/api/test_api_get_users.py:68: AssertionError","steps":[],"attachments":[{"uid":"73b74333c448c6bc","name":"log","source":"73b74333c448c6bc.txt","type":"text/plain","size":1086}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests.api"},{"name":"suite","value":"test_api_get_users"},{"name":"host","value":"fv-az654-837"},{"name":"thread","value":"3451-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.api.test_api_get_users"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"4d292a9629a4f73d.json","parameterValues":[]}