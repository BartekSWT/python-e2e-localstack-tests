{"uid":"b106146cf8b1c257","name":"test_get_user_invalid_username","fullName":"tests.api.test_api_get_user#test_get_user_invalid_username","historyId":"1ddfca870ab4092d99670b5796c774eb","time":{"start":1718059350874,"stop":1718059350884,"duration":10},"status":"failed","statusMessage":"AssertionError: Expected error message for invalid username\nassert \"The user doesn't exist\" in '404 Client Error:  for url: http://localhost:4001/users/nonexistent_user'\n +  where '404 Client Error:  for url: http://localhost:4001/users/nonexistent_user' = str(HTTPError('404 Client Error:  for url: http://localhost:4001/users/nonexistent_user'))","statusTrace":"get_user_api = <api.get_user.GetUser object at 0x7fea9d315ca0>\nuser_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ5cmlvcyIsImF1dGgiOlt7ImF1dGhvcml0eSI6IlJPTEVfQURNSU4ifSx7ImF1dGhvcml0eSI6IlJPTEVfQ0xJRU5UIn1dLCJpYXQiOjE3MTgwNTkzNTAsImV4cCI6MTcxODA1OTY1MH0.N3EVbEcxUhZ3pfx0zRsvuQAJFk0QLqbhiCT1Jv0JhR8'\n\n    def test_get_user_invalid_username(get_user_api, user_token):\n        try:\n            invalid_username = \"nonexistent_user\"\n>           response = get_user_api.api_call(invalid_username, user_token)\n\ntests/api/test_api_get_user.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/get_user.py:7: in api_call\n    response = self.make_request(\napi/base_api.py:33: in make_request\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [404]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 404 Client Error:  for url: http://localhost:4001/users/nonexistent_user\n\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/site-packages/requests/models.py:1021: HTTPError\n\nDuring handling of the above exception, another exception occurred:\n\nget_user_api = <api.get_user.GetUser object at 0x7fea9d315ca0>\nuser_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ5cmlvcyIsImF1dGgiOlt7ImF1dGhvcml0eSI6IlJPTEVfQURNSU4ifSx7ImF1dGhvcml0eSI6IlJPTEVfQ0xJRU5UIn1dLCJpYXQiOjE3MTgwNTkzNTAsImV4cCI6MTcxODA1OTY1MH0.N3EVbEcxUhZ3pfx0zRsvuQAJFk0QLqbhiCT1Jv0JhR8'\n\n    def test_get_user_invalid_username(get_user_api, user_token):\n        try:\n            invalid_username = \"nonexistent_user\"\n            response = get_user_api.api_call(invalid_username, user_token)\n            # This line should ideally never be reached if the API behaves correctly\n            assert response.status_code == 404, \"Expected status code 404 for nonexistent user\"\n        except Exception as exc:\n            assert \"404\" in str(exc), \"Expected a 404 status code for invalid username\"\n>           assert \"The user doesn't exist\" in str(exc), \"Expected error message for invalid username\"\nE           AssertionError: Expected error message for invalid username\nE           assert \"The user doesn't exist\" in '404 Client Error:  for url: http://localhost:4001/users/nonexistent_user'\nE            +  where '404 Client Error:  for url: http://localhost:4001/users/nonexistent_user' = str(HTTPError('404 Client Error:  for url: http://localhost:4001/users/nonexistent_user'))\n\ntests/api/test_api_get_user.py:77: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1718059348061,"stop":1718059348079,"duration":18},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"sign_in_api","time":{"start":1718059350251,"stop":1718059350251,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"get_user_api","time":{"start":1718059350251,"stop":1718059350251,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"user_credentials","time":{"start":1718059350251,"stop":1718059350252,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"sign_up_api","time":{"start":1718059350251,"stop":1718059350251,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_user_api","time":{"start":1718059350252,"stop":1718059350252,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"user_token","time":{"start":1718059350252,"stop":1718059350858,"duration":606},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Expected error message for invalid username\nassert \"The user doesn't exist\" in '404 Client Error:  for url: http://localhost:4001/users/nonexistent_user'\n +  where '404 Client Error:  for url: http://localhost:4001/users/nonexistent_user' = str(HTTPError('404 Client Error:  for url: http://localhost:4001/users/nonexistent_user'))","statusTrace":"get_user_api = <api.get_user.GetUser object at 0x7fea9d315ca0>\nuser_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ5cmlvcyIsImF1dGgiOlt7ImF1dGhvcml0eSI6IlJPTEVfQURNSU4ifSx7ImF1dGhvcml0eSI6IlJPTEVfQ0xJRU5UIn1dLCJpYXQiOjE3MTgwNTkzNTAsImV4cCI6MTcxODA1OTY1MH0.N3EVbEcxUhZ3pfx0zRsvuQAJFk0QLqbhiCT1Jv0JhR8'\n\n    def test_get_user_invalid_username(get_user_api, user_token):\n        try:\n            invalid_username = \"nonexistent_user\"\n>           response = get_user_api.api_call(invalid_username, user_token)\n\ntests/api/test_api_get_user.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/get_user.py:7: in api_call\n    response = self.make_request(\napi/base_api.py:33: in make_request\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [404]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 404 Client Error:  for url: http://localhost:4001/users/nonexistent_user\n\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/site-packages/requests/models.py:1021: HTTPError\n\nDuring handling of the above exception, another exception occurred:\n\nget_user_api = <api.get_user.GetUser object at 0x7fea9d315ca0>\nuser_token = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ5cmlvcyIsImF1dGgiOlt7ImF1dGhvcml0eSI6IlJPTEVfQURNSU4ifSx7ImF1dGhvcml0eSI6IlJPTEVfQ0xJRU5UIn1dLCJpYXQiOjE3MTgwNTkzNTAsImV4cCI6MTcxODA1OTY1MH0.N3EVbEcxUhZ3pfx0zRsvuQAJFk0QLqbhiCT1Jv0JhR8'\n\n    def test_get_user_invalid_username(get_user_api, user_token):\n        try:\n            invalid_username = \"nonexistent_user\"\n            response = get_user_api.api_call(invalid_username, user_token)\n            # This line should ideally never be reached if the API behaves correctly\n            assert response.status_code == 404, \"Expected status code 404 for nonexistent user\"\n        except Exception as exc:\n            assert \"404\" in str(exc), \"Expected a 404 status code for invalid username\"\n>           assert \"The user doesn't exist\" in str(exc), \"Expected error message for invalid username\"\nE           AssertionError: Expected error message for invalid username\nE           assert \"The user doesn't exist\" in '404 Client Error:  for url: http://localhost:4001/users/nonexistent_user'\nE            +  where '404 Client Error:  for url: http://localhost:4001/users/nonexistent_user' = str(HTTPError('404 Client Error:  for url: http://localhost:4001/users/nonexistent_user'))\n\ntests/api/test_api_get_user.py:77: AssertionError","steps":[],"attachments":[{"uid":"b65c396102605a68","name":"log","source":"b65c396102605a68.txt","type":"text/plain","size":411}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"user_token::0","time":{"start":1718059350927,"stop":1718059350939,"duration":12},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests.api"},{"name":"suite","value":"test_api_get_user"},{"name":"host","value":"fv-az654-837"},{"name":"thread","value":"3451-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.api.test_api_get_user"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"b106146cf8b1c257.json","parameterValues":[]}